#include "pipes.h"
#include "../tokenize/makeArgs.h"


int containsPipe(char *s)
{
	
	
    int i, len = strlen(s);
    int count = 0;
    for(i=0;i<len;i++)
    {
        if(s[i] == '|') count++; //increment count only if c found
    }
         
    printf("COUNT IS: %d \n", count);
    return count; 
	
	
}




char ** parsePrePipe(char *s, int * preCount) // GET FIRST HALF OF STRING AND THEN PASS IT INTO MAKEARGS
{
	char ** prePipe = NULL;
	
	int tokens = 0;
	int len= strlen(s);
	
	
	char firstHalf[9999];
	
	strcpy(firstHalf,s);
	

	char *str = firstHalf;

	char *str1 = strsep(&str, "|");// pipe 1

	tokens = makeargs(str1, &prePipe);
	
	printargs(tokens-1,prePipe);
	
	*preCount = tokens;
	
	return prePipe;
	
	
	
}

char ** parsePostPipe(char *s, int * postCount)
{
	char ** postPipe = NULL;
	
	int tokens = 0;
	int len= strlen(s);
	
	
	char secondHalf[9999];
	
	strcpy(secondHalf,s);
	

	char *str = secondHalf;

	char *str1 = strsep(&str, "|");// pipe 1
	char *str2 = strsep(&str, "\n"); // pipe 2 - THIS WILL BE PASSED INTO MAKEARGS

	tokens = makeargs(str2, &postPipe);
	
	printargs(tokens-1,postPipe);
	
	*postCount = tokens;
	
	return postPipe;
	
	
	
}
void pipeIt(char ** prePipe, char ** postPipe)
{
	int fd[2];
	int status = 0;
	
	pid_t pid,pid1;

    pid = fork();
	
	if(pid != 0) // A.OUT
	{
		waitpid(pid,&status,NULL);
	}
	else
	{
	  int res = pipe(fd);
      pid1 = fork();
	  
	 if(pid1 != 0) // PARENT 
		 {		
			close(fd[1]);
			dup2(fd[0],0);
			close(fd[0]);
			int stat =execvp(postPipe[0],postPipe);
			
			exit(-1);
			
		 }
	
	else // CHILD
		{
			close(fd[0]);
			dup2(fd[1],1);
			close(fd[1]);
			int stat = execvp(prePipe[0],prePipe);
		
			exit(-1);
		}
	
	}	
	
	
} // end PipeIt